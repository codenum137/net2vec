# 实验配置文件
# 定义所有模型组合和实验参数

# 全局设置
global_settings:
  # 数据路径
  nsfnet_test_dir: "data/routenet/nsfnetbw/tfrecords/evaluate"
  gbn_test_dir: "data/routenet/gbnbw/tfrecords/evaluate"
  
  # 模型目录基础路径
  models_base_dir: "fixed_model/0922"
  
  # 实验参数
  batch_size: 32
  num_samples: 1000
  
  # 梯度验证参数
  traffic_min: 0.1
  traffic_max: 1.0
  num_points: 20
  
  # 输出根目录
  base_output_dir: "experiment_results/0922"

# 模型配置方案（类似train_models.py的结构）
# 只需要设置 enabled: true 的配置会被实际使用
model_configs:
  # 不使用物理约束的配置
  - type: "mlp"
    physics: "none"
    enabled: true  # 当前不启用基线模型
    
  - type: "kan"  
    physics: "none"
    enabled: true  # 当前不启用基线模型
    
  # 使用物理约束的配置 - 传统固定lambda
  - type: "mlp"
    physics: "soft"
    enabled: true  
    
  - type: "mlp"
    physics: "hard" 
    enabled: true  
    
  - type: "kan"
    physics: "soft"
    enabled: true  
    
  - type: "kan"
    physics: "hard"
    enabled: true  
    
  # 使用物理约束的配置 - 课程学习（当前启用的配置）
  - type: "mlp"
    physics: "soft_cl"
    enabled: true  # 当前不启用MLP软约束课程学习
    
  - type: "mlp"
    physics: "hard_cl"
    enabled: true   # ✅ 启用MLP硬约束课程学习
    
  - type: "kan"
    physics: "soft_cl"
    enabled: true   # ✅ 启用KAN软约束课程学习
    
  - type: "kan"
    physics: "hard_cl"
    enabled: true  

# lambda_physics参数值（会与上述配置组合生成最终模型）
lambda_values: [0.1]

# 自动生成规则说明：
# - enabled: true 的配置会与 lambda_values 中的每个值组合
# - 生成的模型名称格式：{type}_{physics}_{lambda} （none类型除外）
# - physics包含"_cl"的配置会自动添加课程学习参数
# - use_kan会根据type自动设置（kan=true, mlp=false）

# 自动生成的模型配置（基于上述配置和lambda值）
models:
  # 基于上述配置自动生成的模型列表
  # 只会生成 enabled: true 的配置
  
  # 当前启用的模型（对应train_models.py中的活跃配置）
  mlp_hard_cl_0.1:
    model_type: "mlp"
    physics_type: "hard_cl"
    lambda_physics: 0.1
    delay_model_dir: "mlp_hard_cl_0.1"
    use_kan: false
    curriculum_learning: true
    warmup_steps: 5
    ramp_up_steps: 10
    
  kan_soft_cl_0.1:
    model_type: "kan"
    physics_type: "soft_cl"
    lambda_physics: 0.1
    delay_model_dir: "kan_soft_cl_0.1"
    use_kan: true
    curriculum_learning: true
    warmup_steps: 5
    ramp_up_steps: 10
    
  kan_hard_cl_0.1:
    model_type: "kan"
    physics_type: "hard_cl"
    lambda_physics: 0.1
    delay_model_dir: "kan_hard_cl_0.1"
    use_kan: true
    curriculum_learning: true
    warmup_steps: 5
    ramp_up_steps: 10
    

# 实验定义
experiments:
  evaluate:
    script: "routenet/evaluate_routenet_tf2.py"
    required_args:
      - "delay_model_dir"
      - "nsfnet_test_dir" 
      - "gbn_test_dir"
      - "output_dir"
    optional_args:
      - "batch_size"
      - "num_samples"
      - "kan"
      
  gradient:
    script: "routenet/gradient_sanity_check.py"
    required_args:
      - "model_dir"
      - "output_dir"
    optional_args:
      - "use_kan"
      - "target"
      - "traffic_min"
      - "traffic_max"
      - "num_points"
      
  numerical:
    script: "routenet/numerical_analysis.py"
    required_args:
      - "model_dir"
      - "nsfnet_test_dir"
      - "gbn_test_dir"
      - "output_dir"
    optional_args:
      - "batch_size"
      - "num_samples"
      - "kan"
